<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
canvas {
    border:1px solid #d3d3d3;
    background-color: #000000;
}
</style>
</head>
<body onload="startGame()">
<script>

newPieces = [];
GamePiece = [];
newPieceToUpdate = [];
piecesToRemove = [];
newGamePiece = 0;
randoSpeed = 2;
speedChange = 2;
gravityChange = 0.8;
gravitySpeedChange = 1;
bounceChange = 0.75;
changeMode = false;
burstLength = 50;
burstInterval = 10;
staleClearTime = 15000;
//wallBounceAdjust = 1.05;
wallBounceAdjust = 1.025;

newPieceSpeed = 1000;

var GamePiece;

function startGame() {
	GamePiece = new component(0, 0, "black", 0, 0);
    GameArea.start();

	randoNum = (GameArea.canvas.width*0.5)-3;
	
	}

var GameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 640;
        this.canvas.height = 360;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.interval = setInterval(updateGameArea, 20);        
    },
    stop : function() {
        clearInterval(this.interval);
    },    
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function component(width, height, color, x, y, type) {
    this.type = type;
    this.width = width;
    this.height = height;
    this.x = x;
    this.y = y;    
    this.speedX = 1.5;
    this.speedY = 0;    
    this.gravity = 0.7;
    this.gravitySpeed = 1;
    this.bounce = 0.9;
    this.update = function() {
        ctx = GameArea.context;
        ctx.fillStyle = color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
    }
    this.hitBottom = function() {
        var canvasFloor = GameArea.canvas.height - this.height;
        if (this.y > canvasFloor) {
            this.y = canvasFloor;
            this.gravitySpeed = -(this.gravitySpeed * this.bounce);
        }
    }
}

function component2(radius, color, x, y, id) {
	this.id = id;
   	this.radius = radius;
   	this.x = x;
   	this.y = y;
	let mark1Store = 0;
	let mark2Store = 0;
	let difference;
	let activelyCalculatingBounce = true;
	let pieceBouncing = true;
	let loopCount = 0;
	let activeCountTemp = true;
	let circleStopped = false;

	let stahp = function(){circleStopped = true; activelyCalculatingBounce = false;}
	setTimeout(stahp, staleClearTime);

	/*let radiusCondition;
	let distance;		
	let circle1Bottom;
	let circle1Top;
	let circle1Left;
	let circle1Right;
	let circle2Bottom;
	let circle2Top;
	let circle2Left;
	let circle2Right;*/

    this.speedX = randoSpeed;

    this.speedY = 0;    
    this.gravity = gravityChange;
    this.gravitySpeed = gravitySpeedChange;
    this.bounce = bounceChange;
    this.update = function() {
        ctx = GameArea.context;
        ctx.fillStyle = color;
		ctx.beginPath();
		ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
		ctx.fill();
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
		this.hitLeft();
		this.hitRight();
		//this.hitOther();
		this.hitOtherCalculate();
		this.calculateBouncing();
		this.floorFriction();
    }
    this.hitBottom = function() {
        var canvasFloor = GameArea.canvas.height - this.radius;
        if (this.y > canvasFloor) {
            this.y = canvasFloor;
            this.gravitySpeed = -(this.gravitySpeed * this.bounce);
        }

	this.calculateBouncing = function(){
	if(activeCountTemp == true){activelyCalculatingBounce = true;}
		if(activelyCalculatingBounce == true){
console.log("asdf");
			let mark1;
			let mark2;
			mark1Store = this.y;
			mark2Store = this.y;
			let mark1Capture = function(){mark1 = mark1Store;}
			let mark2Capture = function(){mark2 = mark2Store;}
			let differenceCapture =  function(){difference = mark1 - mark2;}
			//let consoleCaputure = function(){console.log(Math.abs(difference));}
			let differenceCalculation = function(){
			setTimeout(mark1Capture, 400);
			setTimeout(mark2Capture, 1000);
			setTimeout(differenceCapture, 1100);
			//setTimeout(consoleCaputure, 1100);
			}
		
			setTimeout(differenceCalculation, 1200);
			//setTimeout(consoleCaputure, 1101);

			if(Math.abs(difference) < 0.1 && this.y > ((GameArea.canvas.height-this.radius))-0.5){
			//alert("not bouncing");
				pieceBouncing = false;
				activelyCalculatingBounce = false;

			}
		
		}

	}
	
	this.floorFriction = function(){
	if(pieceBouncing == false){


	if(this.speedX > 0){
		do{

			//if(this.speedX > 0){

			//this.speedX -= 0.05;
			this.speedX -= ((0.9+(this.gravity/2))*0.1);
			console.log(this.speedX);
			
				//this.speedX = 0;

			//}

			if(this.speedX < 0){

				this.speedX = 0;
				activeCountTemp = false;
				circleStopped = true;
				break;

			}

		}
		while(this.speedX < 0);
		//console.log(this.speedX);
	}
	else if(this.speedX < 0){
		do{

			this.speedX += ((0.9+(this.gravity/2))*0.1);
			console.log(this.speedX);

			if(this.speedX > 0){

				this.speedX = 0;
				circleStopped = true;
				break;

			}

		}
		while(this.speedX > 0);

	}
	
		/*for(let i = 0; this.speedX > 0; i++){
			
			let timeWaster = 0;
			
			while(){
			
				let timeWasterFunc = function(){timeWaster = 1;}
			
				setTimeout(timeWasterFunc, 250);
				console.log("timewasting");
			
			}
			
			
			this.speedX -= 0.1
			
			console.log(this.speedX);
			if(this.speedX < 0){
			
				this.speedX = 0;
			
			}
		
		}*/

	}

    }
	}
	this.hitLeft = function(){
	var leftWall = this.radius;
		if (this.x < leftWall) {
			this.x = leftWall;
			
			//if(this.gravitySpeed < 0){
			
				//this.speedX = -((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);
			
			//}
			//else{

				//this.speedX = ((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				//this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);
				
			//}

		}

	}		

	this.hitRight = function(){
	var rightWall = GameArea.canvas.width - this.radius;
		if (this.x > rightWall) {
			this.x = rightWall;
			
			//if(this.gravitySpeed < 0){
			
				//this.speedX = ((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);

			//}
			//else{
			
				//this.speedX = -((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				//this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);

			//}

		}

	}

	this.hitOtherCalculate = function(){
	
	if(newGamePiece > 0 && circleStopped == false){
	
		if(loopCount < newPieces.length+1){

		console.log(loopCount);
	
			for(let i = 0; i < newPieces.length; i++){
				
				//loopCount += 1;

				if(this.id == i){
					console.log("skipped");
					i += 1;

				}

				console.log("LoopTest: "+i);
				
				let dx = [];
				let dy = [];
				dx[i] = this.x - newPieces[i].x;
				dy[i] = this.y - newPieces[i].y;
				let distance = Math.sqrt(dx[i] * dx[i] + dy[i] * dy[i]);
								
				let radiusCondition = this.radius + newPieces[i].radius;

				let circle1Bottom = this.y - this.radius;
				let circle1Top = this.y + this.radius;
				let circle1Left = this.x + this.radius;
				let circle1Right = this.x - this.radius;
				
				let circle2Bottom = newPieces[i].y + newPieces[i].radius;
				let circle2Top = newPieces[i].y - newPieces[i].radius;
				let circle2Left = newPieces[i].x - newPieces[i].radius;
				let circle2Right = newPieces[i].x + newPieces[i].radius;

					if(i >= newGamePiece){
						console.log("returned");
						return;

					}
					
				if (distance < radiusCondition) {
					
			console.log("collision");
					
			if(circle1Top < circle2Bottom){
					
				//circle1Top = circle2Bottom;
				this.gravitySpeed = -(this.gravitySpeed * this.bounce);
				console.log("topbottom");
					
			}
			else if(circle1Bottom < circle2Top){
					
				//circle1Bottom = circle2Top;
				this.gravitySpeed = (this.gravitySpeed * this.bounce);
				console.log("bottomtop");
			}
					
			if(circle1Right < circle2Left){
					
				//circle1Right = circle2Left;
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce*1.3);
				console.log("rightleft");
			}
			else if(circle1Left > circle2Right){
					
				//circle1Left = circle2Right;
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce*1.3);
				console.log("leftright");	
					
			}
						
		}
				

				}
		
			}
	
		}

	}	


	/*this.hitOther = function(){
	console.log(distance+ " --- " + radiusCondition);
		if (distance < radiusCondition) {
					
			console.log("collision");
					
			if(circle1Top < circle2Bottom){
					
				circle1Top = circle2Bottom;
				this.gravitySpeed = -(this.gravitySpeed * this.bounce);
				console.log("topbottom");
					
			}
			else if(circle1Bottom < circle2Top){
					
				circle1Bottom = circle2Top;
				this.gravitySpeed = -(this.gravitySpeed * this.bounce);
				
			}
					
			if(circle1Right < circle2Left){
					
				circle1Right = circle2Left;
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);
					
			}
			else if(circle1Left > circle1Right){
					
				circle1Left = circle2Right;
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);
						
					
			}
						
		}

	}*/

}

function newPiece(){

	if(changeMode == false){	

	if(randoNum == (GameArea.canvas.width*0.5)-5){
			randoNum = (GameArea.canvas.width*0.5)/*+5*/;
			console.log(randoNum);
		}
		else{
			randoNum = (GameArea.canvas.width*0.5)/*-5*/;
		}
		
		if(randoSpeed == speedChange){
		
			randoSpeed = speedChange*-1;
		
		}
		else{
		
			randoSpeed = speedChange;
		
		}

	}
	else{

		randoNum = 20;
		randoSpeed = speedChange;

	}

	GamePiece[newGamePiece] = new component2(15, "#00e600", /*GameArea.canvas.width/2*/ randoNum, 0, newGamePiece);
	newPieces.push(GamePiece[newGamePiece]);		

	newPiecesUpdate = function () {
			
		for(let i = 0; i < newGamePiece; i++){
			
			newPieceToUpdate[i] = newPieces[i].update();
			
		}

	}

	newPiecesPos = function () {

		for(let i = 0; i < newGamePiece; i++){
			
			newPieceToUpdate[i] = newPieces[i].newPos();
			
		}

	}

	if(newGamePiece >= 250){

		delete newPieces[newGamePiece-250].x;

	}

	for(let i = 0; i <= newGamePiece; i++){

		piecesToRemove[i] = newPieces[i];
		clearStalePieces = function (){

		delete piecesToRemove[i].x;

		}

		setTimeout(clearStalePieces, staleClearTime)

	}


	console.log("GamePiece"+newGamePiece);
	newGamePiece += 1;
		
}

makingNewPieces = setInterval(newPiece, newPieceSpeed);
clearInterval(makingNewPieces);

document.addEventListener('keydown', function(event) {

	if (event.code == 'ArrowRight') {

	clearInterval(makingNewPieces);
	
		if(newPieceSpeed > 0){
		
			newPieceSpeed -= 25;
			document.getElementById("frequencyLabelValueId").innerHTML = newPieceSpeed;

		}

		makingNewPieces = setInterval(newPiece, newPieceSpeed);

	}

	if (event.code == 'ArrowLeft') {

		clearInterval(makingNewPieces);

		newPieceSpeed += 25;
		document.getElementById("frequencyLabelValueId").innerHTML = newPieceSpeed;


		makingNewPieces = setInterval(newPiece, newPieceSpeed);

	}

	if (event.code == 'ArrowDown') {

		newPiece();
	
	}

	if (event.code == 'ArrowUp') {

		for(let i = 0; i < burstLength; i++){

			setTimeout(newPiece, (100+(i*burstInterval)));

		}

	}

	if (event.code == 'Digit1') {

		speedChange -= 0.25;
		document.getElementById("speedLabelValueId").innerHTML = speedChange;

	}

	if (event.code == 'Digit2') {

		speedChange += 0.25;
		document.getElementById("speedLabelValueId").innerHTML = speedChange;

	}

	if (event.code == 'KeyQ') {

		gravityChange -= 0.05;
		document.getElementById("gravityLabelValueId").innerHTML = gravityChange;

	}

	if (event.code == 'KeyW') {

		gravityChange += 0.05;
		document.getElementById("gravityLabelValueId").innerHTML = gravityChange;

	}

	if (event.code == 'KeyA') {

		gravitySpeedChange -= 0.05;
		document.getElementById("gravitySpeedLabelValueId").innerHTML = gravitySpeedChange;

	}

	if (event.code == 'KeyS') {

		gravitySpeedChange += 0.05;
		document.getElementById("gravitySpeedLabelValueId").innerHTML = gravitySpeedChange;

	
	}

	if (event.code == 'KeyZ') {

		bounceChange -= 0.05;
		document.getElementById("bounceLabelValueId").innerHTML = bounceChange;
	
	}

	if (event.code == 'KeyX') {

		bounceChange += 0.05;
		document.getElementById("bounceLabelValueId").innerHTML = bounceChange;

	}

	if (event.code == 'KeyE') {

		burstLength -= 5;
		document.getElementById("burstLengthLabelValueId").innerHTML = burstLength;
	
	}

	if (event.code == 'KeyR') {

		burstLength += 5;
		document.getElementById("burstLengthLabelValueId").innerHTML = burstLength;

	}

	if (event.code == 'KeyD') {

		burstInterval -= 10;
		document.getElementById("burstIntervalLabelValueId").innerHTML = burstInterval;
	
	}

	if (event.code == 'KeyF') {

		burstInterval += 10;
		document.getElementById("burstIntervalLabelValueId").innerHTML = burstInterval;

	}

	if (event.code == 'KeyC') {

		staleClearTime -= 1000;
		document.getElementById("staleClearTimeLabelValueId").innerHTML = (Math.round(staleClearTime/100)*0.1)+"s";
	
	}

	if (event.code == 'KeyV') {

		staleClearTime += 1000;
		document.getElementById("staleClearTimeLabelValueId").innerHTML = (Math.round(staleClearTime/100)*0.1)+"s";

	}

	if (event.code == 'Space') {

		if(changeMode == false){

			changeMode = true;
		
		}
		else{

			changeMode = false;
		
		}

	}

	if (event.code == 'Delete') {

		for(let i = 0; i < newPieces.length; i++){ 
		
			delete newPieces[i].x; 

		}

	}

	if (event.code == 'End') {

		clearInterval(makingNewPieces);

	}
	
});

br1 = document.createElement("br");
document.body.appendChild(br1);

frequencyLabel = document.createElement("label");
frequencyLabel.id = "frequencyLabelId";
frequencyLabel.innerHTML = "Interval(left/right):";
document.body.appendChild(frequencyLabel);

frequencyLabelValue = document.createElement("p");
frequencyLabelValue.id = "frequencyLabelValueId";
frequencyLabelValue.innerHTML = "unknown";
document.body.appendChild(frequencyLabelValue);
document.getElementById("frequencyLabelValueId").innerHTML = newPieceSpeed;

speedLabel = document.createElement("label");
speedLabel.innerHTML = "Speed(1/2):";
document.body.appendChild(speedLabel);

speedLabelValue = document.createElement("p");
speedLabelValue.id = "speedLabelValueId";
speedLabelValue.innerHTML = "unknown";
document.body.appendChild(speedLabelValue);
document.getElementById("speedLabelValueId").innerHTML = speedChange;

gravityLabel = document.createElement("label");
gravityLabel.innerHTML = "Gravity(q/w):";
document.body.appendChild(gravityLabel);

gravityLabelValue = document.createElement("p");
gravityLabelValue.id = "gravityLabelValueId";
gravityLabelValue.innerHTML = "unknown";
document.body.appendChild(gravityLabelValue);
document.getElementById("gravityLabelValueId").innerHTML = gravityChange;

gravitySpeedLabel = document.createElement("label");
gravitySpeedLabel.innerHTML = "Gravity Speed(a/s):";
document.body.appendChild(gravitySpeedLabel);

gravitySpeedLabelValue = document.createElement("p");
gravitySpeedLabelValue.id = "gravitySpeedLabelValueId";
gravitySpeedLabelValue.innerHTML = "unknown";
document.body.appendChild(gravitySpeedLabelValue);
document.getElementById("gravitySpeedLabelValueId").innerHTML = gravitySpeedChange;

bounceLabel = document.createElement("label");
bounceLabel.innerHTML = "Bounce(z/x):";
document.body.appendChild(bounceLabel);

bounceLabelValue = document.createElement("p");
bounceLabelValue.id = "bounceLabelValueId";
bounceLabelValue.innerHTML = "unknown";
document.body.appendChild(bounceLabelValue);
document.getElementById("bounceLabelValueId").innerHTML = bounceChange;

burstLengthLabel = document.createElement("label");
burstLengthLabel.innerHTML = "Burst Length(e/r):";
document.body.appendChild(burstLengthLabel);

burstLengthLabelValue = document.createElement("p");
burstLengthLabelValue.id = "burstLengthLabelValueId";
burstLengthLabelValue.innerHTML = "unknown";
document.body.appendChild(burstLengthLabelValue);
document.getElementById("burstLengthLabelValueId").innerHTML = burstLength;

burstIntervalLabel = document.createElement("label");
burstIntervalLabel.innerHTML = "Burst Interval(d/f):";
document.body.appendChild(burstIntervalLabel);

burstIntervalLabelValue = document.createElement("p");
burstIntervalLabelValue.id = "burstIntervalLabelValueId";
burstIntervalLabelValue.innerHTML = "unknown";
document.body.appendChild(burstIntervalLabelValue);
document.getElementById("burstIntervalLabelValueId").innerHTML = burstInterval;

staleClearTimeLabel = document.createElement("label");
staleClearTimeLabel.innerHTML = "Stale Clear Time(c/v):";
document.body.appendChild(staleClearTimeLabel);

staleClearTimeLabelValue = document.createElement("p");
staleClearTimeLabelValue.id = "staleClearTimeLabelValueId";
staleClearTimeLabelValue.innerHTML = "unknown";
document.body.appendChild(staleClearTimeLabelValue);
document.getElementById("staleClearTimeLabelValueId").innerHTML = (Math.round(staleClearTime/100)*0.1)+"s";



function updateGameArea() {
    GameArea.clear();
    GamePiece.newPos();
    GamePiece.update();
    newPiecesUpdate();
    newPiecesPos();
}

</script>
</body>
</html>
