<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
canvas {
    border:1px solid #d3d3d3;
    background-color: #000000;
}
</style>
</head>
<body onload="startGame()">
<script>

newPieces = [];
GamePiece = [];
newPieceToUpdate = [];
piecesToRemove = [];
newGamePiece = 0;
randoSpeed = 2;
speedChange = 2;
gravityChange = 0.8;
gravitySpeedChange = 1;
bounceChange = 0.9;
changeMode = false;
burstLength = 50;
burstInterval = 1;
staleClearTime = 15000;
wallBounceAdjust = 1.1;

newPieceSpeed = 1000;

var myGamePiece;

function startGame() {
	myGamePiece = new component(0, 0, "black", 0, 0);
    myGameArea.start();

	randoNum = (myGameArea.canvas.width*0.5)-3;
	
	}

var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 480;
        this.canvas.height = 270;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.interval = setInterval(updateGameArea, 20);        
    },
    stop : function() {
        clearInterval(this.interval);
    },    
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function component(width, height, color, x, y, type) {
    this.type = type;
    this.width = width;
    this.height = height;
    this.x = x;
    this.y = y;    
    this.speedX = 1.5;
    this.speedY = 0;    
    this.gravity = 0.7;
    this.gravitySpeed = 1;
    this.bounce = 0.9;
    this.update = function() {
        ctx = myGameArea.context;
        ctx.fillStyle = color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
    }
    this.hitBottom = function() {
        var rockbottom = myGameArea.canvas.height - this.height;
        if (this.y > rockbottom) {
            this.y = rockbottom;
            this.gravitySpeed = -(this.gravitySpeed * this.bounce);
        }
    }
}

function component2(radius, color, x, y) {
    this.radius = radius;
    this.x = x;
    this.y = y;

    this.speedX = randoSpeed;

    this.speedY = 0;    
    this.gravity = gravityChange;
    this.gravitySpeed = gravitySpeedChange;
    this.bounce = bounceChange;
    this.update = function() {
        ctx = myGameArea.context;
        ctx.fillStyle = color;
		ctx.beginPath();
		ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
		ctx.fill();
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
	this.hitLeft();
	this.hitRight();
	//this.hitOther();
    }
    this.hitBottom = function() {
	let pieceBouncing = true;
        var rockbottom = myGameArea.canvas.height - this.radius;
        if (this.y > rockbottom) {
            this.y = rockbottom;
            this.gravitySpeed = -(this.gravitySpeed * this.bounce);
        }
	
	calculateBouncing = function(){

		let mark1 = this.y;
		let mark2Function = function(){mark2 = this.y;}
		

		mark2 = 

		if(Math.abs(difference) < 0.5){

			pieceBouncing = true;

		}

	}

	bouncingCalculation = setInterval(calculateBouncing, 50)

	if(pieceBouncing == false){
	alert("test");
		this.speedX = 0;
		clearInterval(calculateBouncing);

	}

    }
	this.hitLeft = function(){
	var leftWall = this.radius;
		if (this.x < leftWall) {
			this.x = leftWall;
			
			if(this.gravitySpeed < 0){
			
				//this.speedX = -((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);
			
			}
			else{

				//this.speedX = ((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				this.speedX = ((this.speedX*wallBounceAdjust) * this.bounce);
				
			}

		}

	}		

	this.hitRight = function(){
	var rightWall = myGameArea.canvas.width - this.radius;
		if (this.x > rightWall) {
			this.x = rightWall;
			
			if(this.gravitySpeed < 0){
			
				//this.speedX = ((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				this.speedX = -((this.speedX*wallBounceAdjust) * this.bounce);

			}
			else{
			
				//this.speedX = -((this.gravitySpeed*wallBounceAdjust) * this.bounce);
				this.speedX = ((this.speedX*wallBounceAdjust) * this.bounce);

			}

		}

	}

	this.hitOther = function(){
	
	if(newGamePiece > 1){
	
			for(let i = 0; i < newGamePiece; i++){
	
				var dx = newPieces[newGamePiece-2].x - newPieces[newGamePiece-1].x;
				var dy = newPieces[newGamePiece-2].y - newPieces[newGamePiece-1].y;
				var distance = Math.sqrt(dx * dx + dy * dy);
				
				circle1Bottom = newPieces[newGamePiece-2].y - newPieces[newGamePiece-2].radius;
				circle1Top = newPieces[newGamePiece-2].y + newPieces[newGamePiece-2].radius;
				circle1Left = newPieces[newGamePiece-2].x + newPieces[newGamePiece-2].radius;
				circle1Right = newPieces[newGamePiece-2].x - newPieces[newGamePiece-2].radius;
				
				circle2Bottom = newPieces[newGamePiece-1].y + newPieces[newGamePiece-1].radius;
				circle2Top = newPieces[newGamePiece-1].y - newPieces[newGamePiece-1].radius;
				circle2Left = newPieces[newGamePiece-1].x - newPieces[newGamePiece-1].radius;
				circle2Right = newPieces[newGamePiece-1].x + newPieces[newGamePiece-1].radius;

				if (distance < newPieces[newGamePiece-2].radius + newPieces[newGamePiece-1].radius) {
					
					console.log("collision");
					
					if(circle1Top == circle1Bottom){
					
						//nothing
					
					}
					
					if(circle1Top < circle2Bottom){
					
						circle1Top = circle2Bottom;
						newPieces[newGamePiece-2].gravitySpeed = (newPieces[newGamePiece-2].gravitySpeed * newPieces[newGamePiece-2].bounce);
						console.log("topbottom");
					
					}
					else if(circle1Bottom < circle2Top){
					
						circle1Bottom = circle2Top;
						newPieces[newGamePiece-2].gravitySpeed = -(newPieces[newGamePiece-2].gravitySpeed * newPieces[newGamePiece-2].bounce);
					
					}
					
					if(circle1Right < circle2Left){
					
						circle1Right = circle2Left;
						newPieces[newGamePiece-1].speedX = -(newPieces[newGamePiece-1].gravitySpeed * newPieces[newGamePiece-1].bounce);
					
					}
					else if(circle1Left > circle1Right){
					
						circle1Left = circle1Right;
						newPieces[newGamePiece-1].speedX = (newPieces[newGamePiece-1].gravitySpeed * newPieces[newGamePiece-1].bounce);
						
					
					}
					
					
				}
		
			}
	
		}
	}
}

function newPiece(){

	if(changeMode == false){	

	if(randoNum == (myGameArea.canvas.width*0.5)-5){
			randoNum = (myGameArea.canvas.width*0.5)/*+5*/;
			console.log(randoNum);
		}
		else{
			randoNum = (myGameArea.canvas.width*0.5)/*-5*/;
		}
		
		if(randoSpeed == speedChange){
		
			randoSpeed = speedChange*-1;
		
		}
		else{
		
			randoSpeed = speedChange;
		
		}

	}
	else{

		randoNum = 20;
		randoSpeed = speedChange;

	}

	GamePiece[newGamePiece] = new component2(15, "#00e600", /*myGameArea.canvas.width/2*/ randoNum, 0);
	newPieces.push(GamePiece[newGamePiece]);		

	newPiecesUpdate = function () {
			
		for(let i = 0; i < newGamePiece; i++){
			
			newPieceToUpdate[i] = newPieces[i].update();
			
		}

	}

	newPiecesPos = function () {

		for(let i = 0; i < newGamePiece; i++){
			
			newPieceToUpdate[i] = newPieces[i].newPos();
			
		}

	}

	if(newGamePiece >= 250){

		delete newPieces[newGamePiece-250].x;

	}

	for(let i = 0; i <= newGamePiece; i++){

		piecesToRemove[i] = newPieces[i];
		clearStalePieces = function (){

		delete piecesToRemove[i].x;

		}

		setTimeout(clearStalePieces, staleClearTime)

	}


	console.log("GamePiece"+newGamePiece);
	newGamePiece += 1;
		
}

makingNewPieces = setInterval(newPiece, newPieceSpeed);
clearInterval(makingNewPieces);

document.addEventListener('keydown', function(event) {

	if (event.code == 'ArrowRight') {

	clearInterval(makingNewPieces);
	
		if(newPieceSpeed > 0){
		
			newPieceSpeed -= 25;
			document.getElementById("frequencyLabelValueId").innerHTML = newPieceSpeed;

		}

		makingNewPieces = setInterval(newPiece, newPieceSpeed);

	}

	if (event.code == 'ArrowLeft') {

		clearInterval(makingNewPieces);

		newPieceSpeed += 25;
		document.getElementById("frequencyLabelValueId").innerHTML = newPieceSpeed;


		makingNewPieces = setInterval(newPiece, newPieceSpeed);

	}

	if (event.code == 'ArrowDown') {
	
	
	
		//randoNum = Math.floor(Math.random()*(myGameArea.canvas.width*0.5))+(myGameArea.canvas.width*0.25);
		if(randoNum == (myGameArea.canvas.width*0.5)-5){
			randoNum = (myGameArea.canvas.width*0.5)+5;
			console.log(randoNum);
		}
		else{
			randoNum = (myGameArea.canvas.width*0.5)-5;
		}
		
		if(randoSpeed == 2){
		
			randoSpeed = -2;
		
		}
		else{
		
			randoSpeed = 2;
		
		}

		newPiece();
	
	}

	if (event.code == 'ArrowUp') {

		for(let i = 0; i < burstLength; i++){

			setTimeout(newPiece, (100+(i*burstInterval)));

		}

	}

	if (event.code == 'Digit1') {

		speedChange -= 0.05;
		document.getElementById("speedLabelValueId").innerHTML = speedChange;

	}

	if (event.code == 'Digit2') {

		speedChange += 0.05;
		document.getElementById("speedLabelValueId").innerHTML = speedChange;

	}

	if (event.code == 'KeyQ') {

		gravityChange -= 0.05;
		document.getElementById("gravityLabelValueId").innerHTML = gravityChange;

	}

	if (event.code == 'KeyW') {

		gravityChange += 0.05;
		document.getElementById("gravityLabelValueId").innerHTML = gravityChange;

	}

	if (event.code == 'KeyA') {

		gravitySpeedChange -= 0.05;
		document.getElementById("gravitySpeedLabelValueId").innerHTML = gravitySpeedChange;

	}

	if (event.code == 'KeyS') {

		gravitySpeedChange += 0.05;
		document.getElementById("gravitySpeedLabelValueId").innerHTML = gravitySpeedChange;

	
	}

	if (event.code == 'KeyZ') {

		bounceChange -= 0.05;
		document.getElementById("bounceLabelValueId").innerHTML = bounceChange;
	
	}

	if (event.code == 'KeyX') {

		bounceChange += 0.05;
		document.getElementById("bounceLabelValueId").innerHTML = bounceChange;

	}

	if (event.code == 'KeyE') {

		burstLength -= 5;
		document.getElementById("burstLengthLabelValueId").innerHTML = burstLength;
	
	}

	if (event.code == 'KeyR') {

		burstLength += 5;
		document.getElementById("burstLengthLabelValueId").innerHTML = burstLength;

	}

	if (event.code == 'KeyD') {

		burstInterval -= 1;
		document.getElementById("burstIntervalLabelValueId").innerHTML = burstInterval;
	
	}

	if (event.code == 'KeyF') {

		burstInterval += 1;
		document.getElementById("burstIntervalLabelValueId").innerHTML = burstInterval;

	}

	if (event.code == 'KeyC') {

		staleClearTime -= 1000;
		document.getElementById("staleClearTimeLabelValueId").innerHTML = (Math.round(staleClearTime/100)*0.1)+"s";
	
	}

	if (event.code == 'KeyV') {

		staleClearTime += 1000;
		document.getElementById("staleClearTimeLabelValueId").innerHTML = (Math.round(staleClearTime/100)*0.1)+"s";

	}

	if (event.code == 'Space') {

		if(changeMode == false){

			changeMode = true;
		
		}
		else{

			changeMode = false;
		
		}

	}

	if (event.code == 'Delete') {

		for(let i = 0; i < newPieces.length; i++){ 
		
			delete newPieces[i].x; 

		}

	}

	if (event.code == 'End') {

		clearInterval(makingNewPieces);

	}
	
});

br1 = document.createElement("br");
document.body.appendChild(br1);

frequencyLabel = document.createElement("label");
frequencyLabel.id = "frequencyLabelId";
frequencyLabel.innerHTML = "Interval(left/right):";
document.body.appendChild(frequencyLabel);

frequencyLabelValue = document.createElement("p");
frequencyLabelValue.id = "frequencyLabelValueId";
frequencyLabelValue.innerHTML = "unknown";
document.body.appendChild(frequencyLabelValue);
document.getElementById("frequencyLabelValueId").innerHTML = newPieceSpeed;

speedLabel = document.createElement("label");
speedLabel.innerHTML = "Speed(1/2):";
document.body.appendChild(speedLabel);

speedLabelValue = document.createElement("p");
speedLabelValue.id = "speedLabelValueId";
speedLabelValue.innerHTML = "unknown";
document.body.appendChild(speedLabelValue);
document.getElementById("speedLabelValueId").innerHTML = speedChange;

gravityLabel = document.createElement("label");
gravityLabel.innerHTML = "Gravity(q/w):";
document.body.appendChild(gravityLabel);

gravityLabelValue = document.createElement("p");
gravityLabelValue.id = "gravityLabelValueId";
gravityLabelValue.innerHTML = "unknown";
document.body.appendChild(gravityLabelValue);
document.getElementById("gravityLabelValueId").innerHTML = gravityChange;

gravitySpeedLabel = document.createElement("label");
gravitySpeedLabel.innerHTML = "Gravity Speed(a/s):";
document.body.appendChild(gravitySpeedLabel);

gravitySpeedLabelValue = document.createElement("p");
gravitySpeedLabelValue.id = "gravitySpeedLabelValueId";
gravitySpeedLabelValue.innerHTML = "unknown";
document.body.appendChild(gravitySpeedLabelValue);
document.getElementById("gravitySpeedLabelValueId").innerHTML = gravitySpeedChange;

bounceLabel = document.createElement("label");
bounceLabel.innerHTML = "Bounce(z/x):";
document.body.appendChild(bounceLabel);

bounceLabelValue = document.createElement("p");
bounceLabelValue.id = "bounceLabelValueId";
bounceLabelValue.innerHTML = "unknown";
document.body.appendChild(bounceLabelValue);
document.getElementById("bounceLabelValueId").innerHTML = bounceChange;

burstLengthLabel = document.createElement("label");
burstLengthLabel.innerHTML = "Burst Length(e/r):";
document.body.appendChild(burstLengthLabel);

burstLengthLabelValue = document.createElement("p");
burstLengthLabelValue.id = "burstLengthLabelValueId";
burstLengthLabelValue.innerHTML = "unknown";
document.body.appendChild(burstLengthLabelValue);
document.getElementById("burstLengthLabelValueId").innerHTML = burstLength;

burstIntervalLabel = document.createElement("label");
burstIntervalLabel.innerHTML = "Burst Interval(d/f):";
document.body.appendChild(burstIntervalLabel);

burstIntervalLabelValue = document.createElement("p");
burstIntervalLabelValue.id = "burstIntervalLabelValueId";
burstIntervalLabelValue.innerHTML = "unknown";
document.body.appendChild(burstIntervalLabelValue);
document.getElementById("burstIntervalLabelValueId").innerHTML = burstInterval;

staleClearTimeLabel = document.createElement("label");
staleClearTimeLabel.innerHTML = "Stale Clear Time(c/v):";
document.body.appendChild(staleClearTimeLabel);

staleClearTimeLabelValue = document.createElement("p");
staleClearTimeLabelValue.id = "staleClearTimeLabelValueId";
staleClearTimeLabelValue.innerHTML = "unknown";
document.body.appendChild(staleClearTimeLabelValue);
document.getElementById("staleClearTimeLabelValueId").innerHTML = (Math.round(staleClearTime/100)*0.1)+"s";



function updateGameArea() {
    myGameArea.clear();
    myGamePiece.newPos();
    myGamePiece.update();
    newPiecesUpdate();
    newPiecesPos();
}

</script>
</body>
</html>
